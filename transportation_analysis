# -*- coding: utf-8 -*-
"""
Spatial Justice in Transportation Analysis
Analyzing transportation patterns in Nassau and Kings counties
Using U.S. Census Bureau data to highlight commuting patterns

Author: Mohammad Abdullah
Course: FYS: Maps that Matter
"""

# Install Libraries
# !pip install us github.com/uscensusbureau/citysdk -q
import geopandas as gpd
import pandas as pd
import plotly.express as px
from maptools import census_vars, tiger, ui

def load_transportation_data():
    """
    Load transportation data for Nassau and Kings Counties
    Returns combined dataframe with transportation mode data
    """
    # Load the transportation data for Nassau and Kings Counties
    nassau_data = "https://api.census.gov/data/2021/acs/acs5?get=B08141_001E,B08141_002E,B08141_003E,B08141_021E,B08141_019E&ucgid=pseudo(0500000US36059$1400000)"
    kings_data = "https://api.census.gov/data/2021/acs/acs5?get=B08141_001E,B08141_002E,B08141_003E,B08141_021E,B08141_019E&ucgid=pseudo(0500000US36047$1400000)"
    meta_url = "https://api.census.gov/data/2021/acs/acs5/variables.json"
    
    nassau = census_vars.get(nassau_data, meta_url)
    nassau["county"] = "nassau"
    kings = census_vars.get(kings_data, meta_url)
    kings["county"] = "kings"
    df = pd.concat([nassau, kings])
    
    return df

def load_demographics_data():
    """
    Load demographics data for Nassau and Kings Counties
    Returns combined dataframe with race/ethnicity data
    """
    # Load demographics data for Nassau and Kings Counties
    nassau_data = "https://api.census.gov/data/2021/acs/acs5?get=B03002_001E,B03002_003E,B03002_004E,B03002_005E,B03002_006E&ucgid=pseudo(0500000US36059$1400000)"
    kings_data = "https://api.census.gov/data/2021/acs/acs5?get=B03002_001E,B03002_003E,B03002_004E,B03002_005E,B03002_006E&ucgid=pseudo(0500000US36047$1400000)"
    meta_url = "https://api.census.gov/data/2021/acs/acs5/variables.json"
    
    nassau = census_vars.get(nassau_data, meta_url)
    nassau["county"] = "nassau"
    kings = census_vars.get(kings_data, meta_url)
    kings["county"] = "kings"
    demographics = pd.concat([nassau, kings])
    
    return demographics

def process_transportation_data(df):
    """
    Process and clean transportation data
    Returns cleaned dataframe with renamed columns
    """
    # Extract relevant columns
    cols = ['total',
            'county',
            'no_vehicle_available',
            'car_truck_or_van_drove_alone',
            'public_transportation_excluding_taxicab',
            'walked', 'geometry']
    
    transit = df[cols].copy()
    
    # Rename columns for better understanding
    new_cols = ['total',
                'county',
                'No Vehicle Available',
                'Car Truck or Van',
                'Public Transportation',
                'Walked', 'geometry']
    
    transit.columns = new_cols
    return transit

def process_demographics_data(demographics):
    """
    Process and clean demographics data
    Returns cleaned dataframe with renamed columns
    """
    # Extract relevant demographic columns
    demographic_cols = [
        'total',
        'not_hispanic_or_latino_white_alone',
        'not_hispanic_or_latino_black_or_african_american_alone',
        'not_hispanic_or_latino_american_indian_and_alaska_native_alone',
        'not_hispanic_or_latino_asian_alone',
        'geometry'
    ]
    
    demographics = demographics[demographic_cols].copy()
    
    # Rename columns for better understanding
    new_demographic_cols = [
        'total',
        'White',
        'Black or African American',
        'American Indian and Alaska Native',
        'Asian',
        'geometry'
    ]
    demographics.columns = new_demographic_cols
    return demographics

def create_county_summary(transit, county_name):
    """
    Create summary table for a specific county
    Returns aggregated data for the county
    """
    transit_cols = ['total',
                    'No Vehicle Available',
                    'Car Truck or Van',
                    'Public Transportation',
                    'Walked']
    
    # Filter data for specific county
    table_data = transit[transit.county == county_name][transit_cols].copy()
    
    # Handle missing values
    table_data = table_data.fillna(0)
    
    # Sum all values and convert to DataFrame
    table_data = table_data.sum().to_frame().T
    
    return table_data

def create_transportation_chart(table_data, county_name):
    """
    Create bar chart for transportation modes by county
    Returns plotly figure
    """
    chart_title = f"Transportation Modes, {county_name.title()} County"
    
    # Exclude total column
    chart_cols = ['No Vehicle Available', 'Car Truck or Van', 'Public Transportation', 'Walked']
    
    x_values = chart_cols
    y_values = table_data[chart_cols].iloc[0].tolist()
    
    # Create bar plot
    fig = px.bar(y=y_values, x=x_values, title=chart_title)
    
    # Update layout
    fig.update_layout(
        yaxis_title="Total People",
        xaxis_title="Mode of Transportation",
        yaxis_tickformat=',',
        showlegend=False
    )
    
    return fig

def create_transportation_map(transit):
    """
    Create interactive map showing public transportation usage
    Returns folium map
    """
    map_data = transit.copy()
    
    # Calculate percentage of public transportation usage
    map_data["Public Transportation"] = round(map_data["Public Transportation"] / map_data["total"] * 100)
    
    # Drop tracts with no data
    map_data = map_data[map_data["total"] > 0]
    
    # Create map
    base = ui.base_map(map_data, zoom=12)
    return map_data.explore(m=base, column='Public Transportation', 
                           tooltip="Public Transportation", cmap='Blues', legend=True)

def create_demographics_map(demographics):
    """
    Create interactive map showing demographic distribution
    Returns folium map
    """
    # Drop tracts with no population
    demographics = demographics[demographics['total'] > 0]
    
    # Create map for Black or African American population
    base = ui.base_map(demographics, zoom=12)
    return demographics.explore(m=base, column='Black or African American', 
                               tooltip=['Black or African American'], 
                               cmap='Reds', legend=True)

def main():
    """
    Main analysis function
    """
    # Load and process data
    print("Loading transportation data...")
    df = load_transportation_data()
    transit = process_transportation_data(df)
    
    print("Loading demographics data...")
    demographics = load_demographics_data()
    demographics = process_demographics_data(demographics)
    
    # Create county summaries
    print("Creating county summaries...")
    kings_summary = create_county_summary(transit, "kings")
    nassau_summary = create_county_summary(transit, "nassau")
    
    print("\nKings County Transportation Summary:")
    print(kings_summary)
    
    print("\nNassau County Transportation Summary:")
    print(nassau_summary)
    
    # Create visualizations
    print("Creating visualizations...")
    kings_chart = create_transportation_chart(kings_summary, "kings")
    nassau_chart = create_transportation_chart(nassau_summary, "nassau")
    
    # Show charts
    kings_chart.show()
    nassau_chart.show()
    
    # Create maps
    print("Creating maps...")
    transport_map = create_transportation_map(transit)
    demo_map = create_demographics_map(demographics)
    
    print("Analysis complete!")
    
    return transit, demographics, transport_map, demo_map

if __name__ == "__main__":
    transit, demographics, transport_map, demo_map = main()
